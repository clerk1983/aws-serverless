AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for a web application with S3, API Gateway, Lambda, and DynamoDB.

Resources:
  # S3 Bucket for hosting the static website
  FrontEndBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-frontend-s3-${AWS::Region}-${AWS::AccountId}" # Name of the S3 bucket for static website
      WebsiteConfiguration:
        IndexDocument: index.html # The default index document for the website
        ErrorDocument: error.html # The default error document for the website
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred # Set the bucket ownership to bucket owner preferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false # Do not block public ACLs
        IgnorePublicAcls: false # Do not ignore public ACLs
        BlockPublicPolicy: false # Do not block public bucket policies
        RestrictPublicBuckets: false # Do not restrict public buckets
    DeletionPolicy: Delete # Retain the bucket even if the stack is deleted
    UpdateReplacePolicy: Delete # Retain the table even if the resource is replaced

  # BucketPolicy for the S3 bucket to allow public access
  FrontEndBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontEndBucket # Reference to the FrontEndBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject # Policy to allow public read access to objects
            Effect: Allow
            Principal: "*" # Allow access to everyone
            Action: "s3:GetObject" # Allow GET object actions
            Resource: !Sub "arn:aws:s3:::${FrontEndBucket}/*" # Apply to all objects in the bucket

  # API Gateway
  BackendFunctionApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  # IAM role for Lambda functions with necessary permissions for DynamoDB access
  BackendFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com # Allow the Lambda service to assume this role
            Action: sts:AssumeRole # Action for assuming the role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole # Managed policy for basic Lambda execution
      Policies:
        - PolicyName: DynamoDBAccess # Custom policy for DynamoDB access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem # Allow getting items from DynamoDB
                  - dynamodb:PutItem # Allow putting items into DynamoDB
                  - dynamodb:UpdateItem # Allow updating items in DynamoDB
                  - dynamodb:DeleteItem # Allow deleting items from DynamoDB
                  - dynamodb:Scan # Allow scanning DynamoDB tables
                  - dynamodb:Query # Allow querying DynamoDB tables
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/rvs-*" # Target the specific DynamoDB table

  GamesPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler # The handler for the Lambda function
      Runtime: nodejs20.x # Runtime environment for the Lambda function
      CodeUri: ./packages/backend/dist/invoke/games-post # Path to the function code
      Role: !GetAtt BackendFunctionExecutionRole.Arn # IAM role for the Lambda function
      Environment:
        Variables:
          TABLE_NAME_GAMES: !Ref GamesTable # Environment variable pointing to the DynamoDB table
          TABLE_NAME_TURNS: !Ref TurnsTable # Environment variable pointing to the DynamoDB table
          TABLE_NAME_SQUARE: !Ref SquareTable # Environment variable pointing to the DynamoDB table

      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BackendFunctionApi
            Path: /games/{gameId}
            Method: POST

  GamesTurnsGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler # The handler for the Lambda function
      Runtime: nodejs20.x # Runtime environment for the Lambda function
      CodeUri: ./packages/backend/dist/invoke/games-turns-get # Path to the function code
      Role: !GetAtt BackendFunctionExecutionRole.Arn # IAM role for the Lambda function
      Environment:
        Variables:
          TABLE_NAME_GAMES: !Ref GamesTable # Environment variable pointing to the DynamoDB table
          TABLE_NAME_TURNS: !Ref TurnsTable # Environment variable pointing to the DynamoDB table
          TABLE_NAME_SQUARE: !Ref SquareTable # Environment variable pointing to the DynamoDB table

      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BackendFunctionApi
            Path: /games/{gameId}/turns/{turnCount}
            Method: GET

  GamesTurnsPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler # The handler for the Lambda function
      Runtime: nodejs20.x # Runtime environment for the Lambda function
      CodeUri: ./packages/backend/dist/invoke/games-turns-post # Path to the function code
      Role: !GetAtt BackendFunctionExecutionRole.Arn # IAM role for the Lambda function
      Environment:
        Variables:
          TABLE_NAME_GAMES: !Ref GamesTable # Environment variable pointing to the DynamoDB table
          TABLE_NAME_TURNS: !Ref TurnsTable # Environment variable pointing to the DynamoDB table
          TABLE_NAME_SQUARE: !Ref SquareTable # Environment variable pointing to the DynamoDB table

      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref BackendFunctionApi
            Path: /games/{gameId}/turns
            Method: POST

  GamesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "rvs-games"
      AttributeDefinitions:
        - AttributeName: "game_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "game_id"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
    DeletionPolicy: Delete # Retain the table even if the stack is deleted
    UpdateReplacePolicy: Delete # Retain the table even if the resource is replaced

  TurnsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "rvs-turns"
      AttributeDefinitions:
        - AttributeName: "game_id"
          AttributeType: "S"
        - AttributeName: "turn_count"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "game_id"
          KeyType: "HASH"
        - AttributeName: "turn_count"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
    DeletionPolicy: Delete # Retain the table even if the stack is deleted
    UpdateReplacePolicy: Delete # Retain the table even if the resource is replaced

  SquareTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "rvs-square"
      AttributeDefinitions:
        - AttributeName: "turn_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "turn_id"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
    DeletionPolicy: Delete # Retain the table even if the stack is deleted
    UpdateReplacePolicy: Delete # Retain the table even if the resource is replaced

Outputs:
  # Output the URL of the static website hosted in S3
  WebsiteURL:
    Value: !Sub "http://${FrontEndBucket}.s3-website-${AWS::Region}.amazonaws.com/"
    Description: URL for the static my website

  # Output the endpoint URL for the API Gateway
  ApiEndpoint:
    Value: !Sub "https://${BackendFunctionApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Description: API Gateway endpoint URL
